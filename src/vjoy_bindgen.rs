#![allow(dead_code)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]

/* automatically generated by rust-bindgen */

pub const DEVICENAME_STRING: &'static [u8; 5usize] = b"vJoy\x00";
pub const NTDEVICE_NAME_STRING: &'static [u8; 14usize] =
    b"\\Device\\\\vJoy\x00";
pub const SYMBOLIC_NAME_STRING: &'static [u8; 18usize] =
    b"\\DosDevices\\\\vJoy\x00";
pub const DOS_FILE_NAME: &'static [u8; 10usize] = b"\\\\.\\\\vJoy\x00";
pub const VJOY_INTERFACE: &'static [u8; 8usize] = b"Device_\x00";
pub const VER_X_: ::std::os::raw::c_uint = 0;
pub const VER_H_: ::std::os::raw::c_uint = 2;
pub const VER_M_: ::std::os::raw::c_uint = 1;
pub const VER_L_: ::std::os::raw::c_uint = 8;
pub const VENDOR_N_ID: ::std::os::raw::c_uint = 4660;
pub const PRODUCT_N_ID: ::std::os::raw::c_uint = 48813;
pub const VERSION_N: ::std::os::raw::c_uint = 536;
pub const VENDOR_STR_ID: &'static [u8; 17usize] = b"Shaul Eizikovich\x00";
pub const PRODUCT_STR_ID: &'static [u8; 24usize] =
    b"vJoy - Virtual Joystick\x00";
pub const F_LOAD_POSITIONS: ::std::os::raw::c_uint = 2320;
pub const F_GETATTRIB: ::std::os::raw::c_uint = 2321;
pub const F_GET_FFB_DATA: ::std::os::raw::c_uint = 2322;
pub const F_SET_FFB_STAT: ::std::os::raw::c_uint = 2323;
pub const F_GET_FFB_STAT: ::std::os::raw::c_uint = 2326;
pub const F_GET_DEV_INFO: ::std::os::raw::c_uint = 2327;
pub const F_IS_DRV_FFB_CAP: ::std::os::raw::c_uint = 2328;
pub const F_IS_DRV_FFB_EN: ::std::os::raw::c_uint = 2329;
pub const F_GET_DRV_DEV_MAX: ::std::os::raw::c_uint = 2330;
pub const F_GET_DRV_DEV_EN: ::std::os::raw::c_uint = 2331;
pub const F_IS_DEV_FFB_START: ::std::os::raw::c_uint = 2332;
pub const F_GET_DEV_STAT: ::std::os::raw::c_uint = 2333;
pub const F_GET_DRV_INFO: ::std::os::raw::c_uint = 2334;
pub const F_RESET_DEV: ::std::os::raw::c_uint = 2335;
pub const F_GET_POSITIONS: ::std::os::raw::c_uint = 2336;
pub const IOCTL_HID_SET_FEATURE: ::std::os::raw::c_uint = 721297;
pub const IOCTL_HID_WRITE_REPORT: ::std::os::raw::c_uint = 720911;
pub const MAX_N_DEVICES: ::std::os::raw::c_uint = 16;
pub const HID_USAGE_X: ::std::os::raw::c_uint = 48;
pub const HID_USAGE_Y: ::std::os::raw::c_uint = 49;
pub const HID_USAGE_Z: ::std::os::raw::c_uint = 50;
pub const HID_USAGE_RX: ::std::os::raw::c_uint = 51;
pub const HID_USAGE_RY: ::std::os::raw::c_uint = 52;
pub const HID_USAGE_RZ: ::std::os::raw::c_uint = 53;
pub const HID_USAGE_SL0: ::std::os::raw::c_uint = 54;
pub const HID_USAGE_SL1: ::std::os::raw::c_uint = 55;
pub const HID_USAGE_WHL: ::std::os::raw::c_uint = 56;
pub const HID_USAGE_POV: ::std::os::raw::c_uint = 57;
pub const HID_USAGE_CONST: ::std::os::raw::c_uint = 38;
pub const HID_USAGE_RAMP: ::std::os::raw::c_uint = 39;
pub const HID_USAGE_SQUR: ::std::os::raw::c_uint = 48;
pub const HID_USAGE_SINE: ::std::os::raw::c_uint = 49;
pub const HID_USAGE_TRNG: ::std::os::raw::c_uint = 50;
pub const HID_USAGE_STUP: ::std::os::raw::c_uint = 51;
pub const HID_USAGE_STDN: ::std::os::raw::c_uint = 52;
pub const HID_USAGE_SPRNG: ::std::os::raw::c_uint = 64;
pub const HID_USAGE_DMPR: ::std::os::raw::c_uint = 65;
pub const HID_USAGE_INRT: ::std::os::raw::c_uint = 66;
pub const HID_USAGE_FRIC: ::std::os::raw::c_uint = 67;
pub const HID_ID_STATE: ::std::os::raw::c_uint = 2;
pub const HID_ID_EFFREP: ::std::os::raw::c_uint = 1;
pub const HID_ID_ENVREP: ::std::os::raw::c_uint = 2;
pub const HID_ID_CONDREP: ::std::os::raw::c_uint = 3;
pub const HID_ID_PRIDREP: ::std::os::raw::c_uint = 4;
pub const HID_ID_CONSTREP: ::std::os::raw::c_uint = 5;
pub const HID_ID_RAMPREP: ::std::os::raw::c_uint = 6;
pub const HID_ID_CSTMREP: ::std::os::raw::c_uint = 7;
pub const HID_ID_SMPLREP: ::std::os::raw::c_uint = 8;
pub const HID_ID_EFOPREP: ::std::os::raw::c_uint = 10;
pub const HID_ID_BLKFRREP: ::std::os::raw::c_uint = 11;
pub const HID_ID_CTRLREP: ::std::os::raw::c_uint = 12;
pub const HID_ID_GAINREP: ::std::os::raw::c_uint = 13;
pub const HID_ID_SETCREP: ::std::os::raw::c_uint = 14;
pub const HID_ID_NEWEFREP: ::std::os::raw::c_uint = 1;
pub const HID_ID_BLKLDREP: ::std::os::raw::c_uint = 2;
pub const HID_ID_POOLREP: ::std::os::raw::c_uint = 3;
pub const NO_HANDLE_BY_INDEX: ::std::os::raw::c_int = -1;
pub const BAD_PREPARSED_DATA: ::std::os::raw::c_int = -2;
pub const NO_CAPS: ::std::os::raw::c_int = -3;
pub const BAD_N_BTN_CAPS: ::std::os::raw::c_int = -4;
pub const BAD_CALLOC: ::std::os::raw::c_int = -5;
pub const BAD_BTN_CAPS: ::std::os::raw::c_int = -6;
pub const BAD_BTN_RANGE: ::std::os::raw::c_int = -7;
pub const BAD_N_VAL_CAPS: ::std::os::raw::c_int = -8;
pub const BAD_ID_RANGE: ::std::os::raw::c_int = -9;
pub const NO_SUCH_AXIS: ::std::os::raw::c_int = -10;
pub const BAD_DEV_STAT: ::std::os::raw::c_int = -11;
pub const NO_DEV_EXIST: ::std::os::raw::c_int = -12;
pub const NO_FILE_EXIST: ::std::os::raw::c_int = -13;
pub const REG_PARAM: &'static [u8; 54usize] =
    b"SYSTEM\\\\CurrentControlSet\\\\services\\\\vjoy\\\\Parameters\x00";
pub const REG_PARAM_DEV0: &'static [u8; 63usize] =
    b"SYSTEM\\\\CurrentControlSet\\\\services\\\\vjoy\\\\Parameters\\\\Device0\x00";
pub const REG_PARAM_DEV: &'static [u8; 62usize] =
    b"SYSTEM\\\\CurrentControlSet\\\\services\\\\vjoy\\\\Parameters\\\\Device\x00";
pub const REG_DEVICE: &'static [u8; 7usize] = b"Device\x00";
pub const REG_INIT: &'static [u8; 5usize] = b"Init\x00";
pub const BTN_INIT: &'static [u8; 5usize] = b"BTNS\x00";
pub const INTERFACE_LOG_LEVEL: &'static [u8; 22usize] =
    b"VJOYINTERFACELOGLEVEL\x00";
pub const INTERFACE_LOG_FILE: &'static [u8; 21usize] =
    b"VJOYINTERFACELOGFILE\x00";
pub const INTERFACE_DEF_LOG_FILE: &'static [u8; 18usize] =
    b"vJoyInterface.log\x00";
pub type BOOL = ::std::os::raw::c_int;
pub type BYTE = ::std::os::raw::c_uchar;
pub type CHAR = ::std::os::raw::c_char;
pub type DWORD = ::std::os::raw::c_ulong;
pub type FLOAT = f32;
pub type INT = ::std::os::raw::c_int;
pub type LONG = ::std::os::raw::c_long;
pub type ULONG = ::std::os::raw::c_ulong;
pub type USHORT = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _HID_DEVICE_ATTRIBUTES {
    pub Size: ULONG,
    pub VendorID: USHORT,
    pub ProductID: USHORT,
    pub VersionNumber: USHORT,
    pub Reserved: [USHORT; 11usize],
}
#[test]
fn bindgen_test_layout__HID_DEVICE_ATTRIBUTES() {
    assert_eq!(::std::mem::size_of::<_HID_DEVICE_ATTRIBUTES>() , 32usize ,
               concat ! ( "Size of: " , stringify ! ( _HID_DEVICE_ATTRIBUTES )
               ));
    assert_eq! (::std::mem::align_of::<_HID_DEVICE_ATTRIBUTES>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( _HID_DEVICE_ATTRIBUTES ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _HID_DEVICE_ATTRIBUTES ) ) . Size as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _HID_DEVICE_ATTRIBUTES
                ) , "::" , stringify ! ( Size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _HID_DEVICE_ATTRIBUTES ) ) . VendorID as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _HID_DEVICE_ATTRIBUTES
                ) , "::" , stringify ! ( VendorID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _HID_DEVICE_ATTRIBUTES ) ) . ProductID as
                * const _ as usize } , 6usize , concat ! (
                "Alignment of field: " , stringify ! ( _HID_DEVICE_ATTRIBUTES
                ) , "::" , stringify ! ( ProductID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _HID_DEVICE_ATTRIBUTES ) ) .
                VersionNumber as * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _HID_DEVICE_ATTRIBUTES
                ) , "::" , stringify ! ( VersionNumber ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _HID_DEVICE_ATTRIBUTES ) ) . Reserved as
                * const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _HID_DEVICE_ATTRIBUTES
                ) , "::" , stringify ! ( Reserved ) ));
}
impl Clone for _HID_DEVICE_ATTRIBUTES {
    fn clone(&self) -> Self { *self }
}
pub type HID_DEVICE_ATTRIBUTES = _HID_DEVICE_ATTRIBUTES;
pub type PHID_DEVICE_ATTRIBUTES = *mut _HID_DEVICE_ATTRIBUTES;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum ERRLEVEL { INFO = 0, WARN = 1, ERR = 2, FATAL = 3, APP = 4, }
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _JOYSTICK_POSITION {
    pub bDevice: BYTE,
    pub wThrottle: LONG,
    pub wRudder: LONG,
    pub wAileron: LONG,
    pub wAxisX: LONG,
    pub wAxisY: LONG,
    pub wAxisZ: LONG,
    pub wAxisXRot: LONG,
    pub wAxisYRot: LONG,
    pub wAxisZRot: LONG,
    pub wSlider: LONG,
    pub wDial: LONG,
    pub wWheel: LONG,
    pub wAxisVX: LONG,
    pub wAxisVY: LONG,
    pub wAxisVZ: LONG,
    pub wAxisVBRX: LONG,
    pub wAxisVBRY: LONG,
    pub wAxisVBRZ: LONG,
    pub lButtons: LONG,
    pub bHats: DWORD,
    pub bHatsEx1: DWORD,
    pub bHatsEx2: DWORD,
    pub bHatsEx3: DWORD,
}
#[test]
fn bindgen_test_layout__JOYSTICK_POSITION() {
    assert_eq!(::std::mem::size_of::<_JOYSTICK_POSITION>() , 96usize , concat
               ! ( "Size of: " , stringify ! ( _JOYSTICK_POSITION ) ));
    assert_eq! (::std::mem::align_of::<_JOYSTICK_POSITION>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( _JOYSTICK_POSITION ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . bDevice as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( bDevice ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wThrottle as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wThrottle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wRudder as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wRudder ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAileron as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAileron ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisX as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisY as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisZ as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisZ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisXRot as *
                const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisXRot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisYRot as *
                const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisYRot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisZRot as *
                const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisZRot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wSlider as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wSlider ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wDial as * const
                _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wDial ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wWheel as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wWheel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisVX as *
                const _ as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisVX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisVY as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisVY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisVZ as *
                const _ as usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisVZ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisVBRX as *
                const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisVBRX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisVBRY as *
                const _ as usize } , 68usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisVBRY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . wAxisVBRZ as *
                const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( wAxisVBRZ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . lButtons as *
                const _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( lButtons ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . bHats as * const
                _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( bHats ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . bHatsEx1 as *
                const _ as usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( bHatsEx1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . bHatsEx2 as *
                const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( bHatsEx2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION ) ) . bHatsEx3 as *
                const _ as usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION ) ,
                "::" , stringify ! ( bHatsEx3 ) ));
}
impl Clone for _JOYSTICK_POSITION {
    fn clone(&self) -> Self { *self }
}
pub type JOYSTICK_POSITION = _JOYSTICK_POSITION;
pub type PJOYSTICK_POSITION = *mut _JOYSTICK_POSITION;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _JOYSTICK_POSITION_V2 {
    /// JOYSTICK_POSITION
    pub bDevice: BYTE,
    pub wThrottle: LONG,
    pub wRudder: LONG,
    pub wAileron: LONG,
    pub wAxisX: LONG,
    pub wAxisY: LONG,
    pub wAxisZ: LONG,
    pub wAxisXRot: LONG,
    pub wAxisYRot: LONG,
    pub wAxisZRot: LONG,
    pub wSlider: LONG,
    pub wDial: LONG,
    pub wWheel: LONG,
    pub wAxisVX: LONG,
    pub wAxisVY: LONG,
    pub wAxisVZ: LONG,
    pub wAxisVBRX: LONG,
    pub wAxisVBRY: LONG,
    pub wAxisVBRZ: LONG,
    pub lButtons: LONG,
    pub bHats: DWORD,
    pub bHatsEx1: DWORD,
    pub bHatsEx2: DWORD,
    pub bHatsEx3: DWORD,
    /// JOYSTICK_POSITION_V2 Extenssion
    pub lButtonsEx1: LONG,
    pub lButtonsEx2: LONG,
    pub lButtonsEx3: LONG,
}
#[test]
fn bindgen_test_layout__JOYSTICK_POSITION_V2() {
    assert_eq!(::std::mem::size_of::<_JOYSTICK_POSITION_V2>() , 108usize ,
               concat ! ( "Size of: " , stringify ! ( _JOYSTICK_POSITION_V2 )
               ));
    assert_eq! (::std::mem::align_of::<_JOYSTICK_POSITION_V2>() , 4usize ,
                concat ! (
                "Alignment of " , stringify ! ( _JOYSTICK_POSITION_V2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . bDevice as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( bDevice ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wThrottle as
                * const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wThrottle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wRudder as *
                const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wRudder ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAileron as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAileron ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisX as *
                const _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisY as *
                const _ as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisZ as *
                const _ as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisZ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisXRot as
                * const _ as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisXRot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisYRot as
                * const _ as usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisYRot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisZRot as
                * const _ as usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisZRot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wSlider as *
                const _ as usize } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wSlider ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wDial as *
                const _ as usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wDial ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wWheel as *
                const _ as usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wWheel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisVX as *
                const _ as usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisVX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisVY as *
                const _ as usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisVY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisVZ as *
                const _ as usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisVZ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisVBRX as
                * const _ as usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisVBRX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisVBRY as
                * const _ as usize } , 68usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisVBRY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . wAxisVBRZ as
                * const _ as usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( wAxisVBRZ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . lButtons as *
                const _ as usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( lButtons ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . bHats as *
                const _ as usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( bHats ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . bHatsEx1 as *
                const _ as usize } , 84usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( bHatsEx1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . bHatsEx2 as *
                const _ as usize } , 88usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( bHatsEx2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . bHatsEx3 as *
                const _ as usize } , 92usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( bHatsEx3 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . lButtonsEx1
                as * const _ as usize } , 96usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( lButtonsEx1 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . lButtonsEx2
                as * const _ as usize } , 100usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( lButtonsEx2 ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _JOYSTICK_POSITION_V2 ) ) . lButtonsEx3
                as * const _ as usize } , 104usize , concat ! (
                "Alignment of field: " , stringify ! ( _JOYSTICK_POSITION_V2 )
                , "::" , stringify ! ( lButtonsEx3 ) ));
}
impl Clone for _JOYSTICK_POSITION_V2 {
    fn clone(&self) -> Self { *self }
}
pub type JOYSTICK_POSITION_V2 = _JOYSTICK_POSITION_V2;
pub type PJOYSTICK_POSITION_V2 = *mut _JOYSTICK_POSITION_V2;
pub type SHORT = ::std::os::raw::c_short;
pub type UCHAR = ::std::os::raw::c_uchar;
pub type UINT = ::std::os::raw::c_uint;
pub type WORD = ::std::os::raw::c_ushort;
pub type PVOID = *mut ::std::os::raw::c_void;
pub type VOID = ::std::os::raw::c_void;
pub type HANDLE = PVOID;
pub type HDEVNOTIFY = PVOID;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum VjdStat {
    VJD_STAT_OWN = 0,
    VJD_STAT_FREE = 1,
    VJD_STAT_BUSY = 2,
    VJD_STAT_MISS = 3,
    VJD_STAT_UNKN = 4,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DEVCTRLS {
    pub Init: BOOL,
    pub Rudder: BOOL,
    pub Aileron: BOOL,
    pub AxisX: BOOL,
    pub AxisY: BOOL,
    pub AxisZ: BOOL,
    pub AxisXRot: BOOL,
    pub AxisYRot: BOOL,
    pub AxisZRot: BOOL,
    pub Slider: BOOL,
    pub Dial: BOOL,
    pub Wheel: BOOL,
    pub AxisVX: BOOL,
    pub AxisVY: BOOL,
    pub AxisVZ: BOOL,
    pub AxisVBRX: BOOL,
    pub AxisVBRY: BOOL,
    pub AxisVBRZ: BOOL,
    pub nButtons: INT,
    pub nDescHats: INT,
    pub nContHats: INT,
}
#[test]
fn bindgen_test_layout_DEVCTRLS() {
    assert_eq!(::std::mem::size_of::<DEVCTRLS>() , 84usize , concat ! (
               "Size of: " , stringify ! ( DEVCTRLS ) ));
    assert_eq! (::std::mem::align_of::<DEVCTRLS>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( DEVCTRLS ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . Init as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( Init ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . Rudder as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( Rudder ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . Aileron as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( Aileron ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisX as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisY as * const _ as
                usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisZ as * const _ as
                usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisZ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisXRot as * const _ as
                usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisXRot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisYRot as * const _ as
                usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisYRot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisZRot as * const _ as
                usize } , 32usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisZRot ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . Slider as * const _ as
                usize } , 36usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( Slider ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . Dial as * const _ as usize
                } , 40usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( Dial ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . Wheel as * const _ as
                usize } , 44usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( Wheel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisVX as * const _ as
                usize } , 48usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisVX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisVY as * const _ as
                usize } , 52usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisVY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisVZ as * const _ as
                usize } , 56usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisVZ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisVBRX as * const _ as
                usize } , 60usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisVBRX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisVBRY as * const _ as
                usize } , 64usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisVBRY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . AxisVBRZ as * const _ as
                usize } , 68usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( AxisVBRZ ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . nButtons as * const _ as
                usize } , 72usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( nButtons ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . nDescHats as * const _ as
                usize } , 76usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( nDescHats ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEVCTRLS ) ) . nContHats as * const _ as
                usize } , 80usize , concat ! (
                "Alignment of field: " , stringify ! ( DEVCTRLS ) , "::" ,
                stringify ! ( nContHats ) ));
}
impl Clone for DEVCTRLS {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DeviceStat {
    pub h: HANDLE,
    pub stat: VjdStat,
    pub position: JOYSTICK_POSITION_V2,
    pub hDeviceNotifyHandle: HDEVNOTIFY,
    pub DeviceControls: DEVCTRLS,
    pub pPreParsedData: PVOID,
}
#[test]
fn bindgen_test_layout_DeviceStat() {
    assert_eq!(::std::mem::size_of::<DeviceStat>() , 224usize , concat ! (
               "Size of: " , stringify ! ( DeviceStat ) ));
    assert_eq! (::std::mem::align_of::<DeviceStat>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( DeviceStat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DeviceStat ) ) . h as * const _ as usize
                } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( DeviceStat ) , "::" ,
                stringify ! ( h ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DeviceStat ) ) . stat as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( DeviceStat ) , "::" ,
                stringify ! ( stat ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DeviceStat ) ) . position as * const _ as
                usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( DeviceStat ) , "::" ,
                stringify ! ( position ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DeviceStat ) ) . hDeviceNotifyHandle as *
                const _ as usize } , 120usize , concat ! (
                "Alignment of field: " , stringify ! ( DeviceStat ) , "::" ,
                stringify ! ( hDeviceNotifyHandle ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DeviceStat ) ) . DeviceControls as *
                const _ as usize } , 128usize , concat ! (
                "Alignment of field: " , stringify ! ( DeviceStat ) , "::" ,
                stringify ! ( DeviceControls ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DeviceStat ) ) . pPreParsedData as *
                const _ as usize } , 216usize , concat ! (
                "Alignment of field: " , stringify ! ( DeviceStat ) , "::" ,
                stringify ! ( pPreParsedData ) ));
}
impl Clone for DeviceStat {
    fn clone(&self) -> Self { *self }
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct DEV_INFO {
    pub DeviceID: BYTE,
    pub nImplemented: BYTE,
    pub isImplemented: BYTE,
    pub MaxDevices: BYTE,
    pub DriverFFB: BYTE,
    pub DeviceFFB: BYTE,
}
#[test]
fn bindgen_test_layout_DEV_INFO() {
    assert_eq!(::std::mem::size_of::<DEV_INFO>() , 6usize , concat ! (
               "Size of: " , stringify ! ( DEV_INFO ) ));
    assert_eq! (::std::mem::align_of::<DEV_INFO>() , 1usize , concat ! (
                "Alignment of " , stringify ! ( DEV_INFO ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEV_INFO ) ) . DeviceID as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( DEV_INFO ) , "::" ,
                stringify ! ( DeviceID ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEV_INFO ) ) . nImplemented as * const _
                as usize } , 1usize , concat ! (
                "Alignment of field: " , stringify ! ( DEV_INFO ) , "::" ,
                stringify ! ( nImplemented ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEV_INFO ) ) . isImplemented as * const _
                as usize } , 2usize , concat ! (
                "Alignment of field: " , stringify ! ( DEV_INFO ) , "::" ,
                stringify ! ( isImplemented ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEV_INFO ) ) . MaxDevices as * const _ as
                usize } , 3usize , concat ! (
                "Alignment of field: " , stringify ! ( DEV_INFO ) , "::" ,
                stringify ! ( MaxDevices ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEV_INFO ) ) . DriverFFB as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( DEV_INFO ) , "::" ,
                stringify ! ( DriverFFB ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const DEV_INFO ) ) . DeviceFFB as * const _ as
                usize } , 5usize , concat ! (
                "Alignment of field: " , stringify ! ( DEV_INFO ) , "::" ,
                stringify ! ( DeviceFFB ) ));
}
impl Clone for DEV_INFO {
    fn clone(&self) -> Self { *self }
}
pub type RemovalCB =
    ::std::option::Option<unsafe extern "C" fn(arg1: BOOL, arg2: BOOL,
                                               arg3: PVOID)>;
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FFBEType {
    ET_NONE = 0,
    ET_CONST = 1,
    ET_RAMP = 2,
    ET_SQR = 3,
    ET_SINE = 4,
    ET_TRNGL = 5,
    ET_STUP = 6,
    ET_STDN = 7,
    ET_SPRNG = 8,
    ET_DMPR = 9,
    ET_INRT = 10,
    ET_FRCTN = 11,
    ET_CSTM = 12,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FFBPType {
    PT_EFFREP = 1,
    PT_ENVREP = 2,
    PT_CONDREP = 3,
    PT_PRIDREP = 4,
    PT_CONSTREP = 5,
    PT_RAMPREP = 6,
    PT_CSTMREP = 7,
    PT_SMPLREP = 8,
    PT_EFOPREP = 10,
    PT_BLKFRREP = 11,
    PT_CTRLREP = 12,
    PT_GAINREP = 13,
    PT_SETCREP = 14,
    PT_NEWEFREP = 17,
    PT_BLKLDREP = 18,
    PT_POOLREP = 19,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FFBOP { EFF_START = 1, EFF_SOLO = 2, EFF_STOP = 3, }
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FFB_CTRL {
    CTRL_ENACT = 1,
    CTRL_DISACT = 2,
    CTRL_STOPALL = 3,
    CTRL_DEVRST = 4,
    CTRL_DEVPAUSE = 5,
    CTRL_DEVCONT = 6,
}
#[repr(i32)]
#[derive(Debug, Copy, Clone, PartialEq, Eq, Hash)]
pub enum FFB_EFFECTS {
    Constant = 1,
    Ramp = 2,
    Square = 4,
    Sine = 8,
    Triangle = 16,
    Sawtooth_Up = 32,
    Sawtooth_Dn = 64,
    Spring = 128,
    Damper = 256,
    Inertia = 512,
    Friction = 1024,
    Custom = 2048,
}
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FFB_DATA {
    pub size: ULONG,
    pub cmd: ULONG,
    pub data: *mut UCHAR,
}
#[test]
fn bindgen_test_layout__FFB_DATA() {
    assert_eq!(::std::mem::size_of::<_FFB_DATA>() , 16usize , concat ! (
               "Size of: " , stringify ! ( _FFB_DATA ) ));
    assert_eq! (::std::mem::align_of::<_FFB_DATA>() , 8usize , concat ! (
                "Alignment of " , stringify ! ( _FFB_DATA ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_DATA ) ) . size as * const _ as
                usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_DATA ) , "::" ,
                stringify ! ( size ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_DATA ) ) . cmd as * const _ as usize
                } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_DATA ) , "::" ,
                stringify ! ( cmd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_DATA ) ) . data as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_DATA ) , "::" ,
                stringify ! ( data ) ));
}
impl Clone for _FFB_DATA {
    fn clone(&self) -> Self { *self }
}
pub type FFB_DATA = _FFB_DATA;
pub type PFFB_DATA = *mut _FFB_DATA;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FFB_EFF_CONSTANT {
    pub EffectBlockIndex: BYTE,
    pub Magnitude: LONG,
}
#[test]
fn bindgen_test_layout__FFB_EFF_CONSTANT() {
    assert_eq!(::std::mem::size_of::<_FFB_EFF_CONSTANT>() , 8usize , concat !
               ( "Size of: " , stringify ! ( _FFB_EFF_CONSTANT ) ));
    assert_eq! (::std::mem::align_of::<_FFB_EFF_CONSTANT>() , 4usize , concat
                ! ( "Alignment of " , stringify ! ( _FFB_EFF_CONSTANT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_CONSTANT ) ) . EffectBlockIndex
                as * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_CONSTANT ) ,
                "::" , stringify ! ( EffectBlockIndex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_CONSTANT ) ) . Magnitude as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_CONSTANT ) ,
                "::" , stringify ! ( Magnitude ) ));
}
impl Clone for _FFB_EFF_CONSTANT {
    fn clone(&self) -> Self { *self }
}
pub type FFB_EFF_CONSTANT = _FFB_EFF_CONSTANT;
pub type PFFB_EFF_CONSTANT = *mut _FFB_EFF_CONSTANT;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FFB_EFF_RAMP {
    pub EffectBlockIndex: BYTE,
    pub Start: LONG,
    pub End: LONG,
}
#[test]
fn bindgen_test_layout__FFB_EFF_RAMP() {
    assert_eq!(::std::mem::size_of::<_FFB_EFF_RAMP>() , 12usize , concat ! (
               "Size of: " , stringify ! ( _FFB_EFF_RAMP ) ));
    assert_eq! (::std::mem::align_of::<_FFB_EFF_RAMP>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _FFB_EFF_RAMP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_RAMP ) ) . EffectBlockIndex as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_RAMP ) , "::"
                , stringify ! ( EffectBlockIndex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_RAMP ) ) . Start as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_RAMP ) , "::"
                , stringify ! ( Start ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_RAMP ) ) . End as * const _ as
                usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_RAMP ) , "::"
                , stringify ! ( End ) ));
}
impl Clone for _FFB_EFF_RAMP {
    fn clone(&self) -> Self { *self }
}
pub type FFB_EFF_RAMP = _FFB_EFF_RAMP;
pub type PFFB_EFF_RAMP = *mut _FFB_EFF_RAMP;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FFB_EFF_REPORT {
    pub EffectBlockIndex: BYTE,
    pub EffectType: FFBEType,
    pub Duration: WORD,
    pub TrigerRpt: WORD,
    pub SamplePrd: WORD,
    pub Gain: BYTE,
    pub TrigerBtn: BYTE,
    pub Polar: BOOL,
    pub DirX: BYTE,
    pub DirY: BYTE,
}
#[test]
fn bindgen_test_layout__FFB_EFF_REPORT() {
    assert_eq!(::std::mem::size_of::<_FFB_EFF_REPORT>() , 24usize , concat ! (
               "Size of: " , stringify ! ( _FFB_EFF_REPORT ) ));
    assert_eq! (::std::mem::align_of::<_FFB_EFF_REPORT>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( _FFB_EFF_REPORT ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . EffectBlockIndex as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( EffectBlockIndex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . EffectType as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( EffectType ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . Duration as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( Duration ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . TrigerRpt as *
                const _ as usize } , 10usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( TrigerRpt ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . SamplePrd as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( SamplePrd ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . Gain as * const _
                as usize } , 14usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( Gain ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . TrigerBtn as *
                const _ as usize } , 15usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( TrigerBtn ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . Polar as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( Polar ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . DirX as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( DirX ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_REPORT ) ) . DirY as * const _
                as usize } , 21usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_REPORT ) ,
                "::" , stringify ! ( DirY ) ));
}
impl Clone for _FFB_EFF_REPORT {
    fn clone(&self) -> Self { *self }
}
pub type FFB_EFF_REPORT = _FFB_EFF_REPORT;
pub type PFFB_EFF_REPORT = *mut _FFB_EFF_REPORT;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FFB_EFF_OP {
    pub EffectBlockIndex: BYTE,
    pub EffectOp: FFBOP,
    pub LoopCount: BYTE,
}
#[test]
fn bindgen_test_layout__FFB_EFF_OP() {
    assert_eq!(::std::mem::size_of::<_FFB_EFF_OP>() , 12usize , concat ! (
               "Size of: " , stringify ! ( _FFB_EFF_OP ) ));
    assert_eq! (::std::mem::align_of::<_FFB_EFF_OP>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _FFB_EFF_OP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_OP ) ) . EffectBlockIndex as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_OP ) , "::" ,
                stringify ! ( EffectBlockIndex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_OP ) ) . EffectOp as * const _
                as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_OP ) , "::" ,
                stringify ! ( EffectOp ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_OP ) ) . LoopCount as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_OP ) , "::" ,
                stringify ! ( LoopCount ) ));
}
impl Clone for _FFB_EFF_OP {
    fn clone(&self) -> Self { *self }
}
pub type FFB_EFF_OP = _FFB_EFF_OP;
pub type PFFB_EFF_OP = *mut _FFB_EFF_OP;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FFB_EFF_PERIOD {
    pub EffectBlockIndex: BYTE,
    pub Magnitude: DWORD,
    pub Offset: LONG,
    pub Phase: DWORD,
    pub Period: DWORD,
}
#[test]
fn bindgen_test_layout__FFB_EFF_PERIOD() {
    assert_eq!(::std::mem::size_of::<_FFB_EFF_PERIOD>() , 20usize , concat ! (
               "Size of: " , stringify ! ( _FFB_EFF_PERIOD ) ));
    assert_eq! (::std::mem::align_of::<_FFB_EFF_PERIOD>() , 4usize , concat !
                ( "Alignment of " , stringify ! ( _FFB_EFF_PERIOD ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_PERIOD ) ) . EffectBlockIndex as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_PERIOD ) ,
                "::" , stringify ! ( EffectBlockIndex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_PERIOD ) ) . Magnitude as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_PERIOD ) ,
                "::" , stringify ! ( Magnitude ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_PERIOD ) ) . Offset as * const _
                as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_PERIOD ) ,
                "::" , stringify ! ( Offset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_PERIOD ) ) . Phase as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_PERIOD ) ,
                "::" , stringify ! ( Phase ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_PERIOD ) ) . Period as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_PERIOD ) ,
                "::" , stringify ! ( Period ) ));
}
impl Clone for _FFB_EFF_PERIOD {
    fn clone(&self) -> Self { *self }
}
pub type FFB_EFF_PERIOD = _FFB_EFF_PERIOD;
pub type PFFB_EFF_PERIOD = *mut _FFB_EFF_PERIOD;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FFB_EFF_COND {
    pub EffectBlockIndex: BYTE,
    pub isY: BOOL,
    pub CenterPointOffset: LONG,
    pub PosCoeff: LONG,
    pub NegCoeff: LONG,
    pub PosSatur: DWORD,
    pub NegSatur: DWORD,
    pub DeadBand: LONG,
}
#[test]
fn bindgen_test_layout__FFB_EFF_COND() {
    assert_eq!(::std::mem::size_of::<_FFB_EFF_COND>() , 32usize , concat ! (
               "Size of: " , stringify ! ( _FFB_EFF_COND ) ));
    assert_eq! (::std::mem::align_of::<_FFB_EFF_COND>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _FFB_EFF_COND ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_COND ) ) . EffectBlockIndex as *
                const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_COND ) , "::"
                , stringify ! ( EffectBlockIndex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_COND ) ) . isY as * const _ as
                usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_COND ) , "::"
                , stringify ! ( isY ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_COND ) ) . CenterPointOffset as
                * const _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_COND ) , "::"
                , stringify ! ( CenterPointOffset ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_COND ) ) . PosCoeff as * const _
                as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_COND ) , "::"
                , stringify ! ( PosCoeff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_COND ) ) . NegCoeff as * const _
                as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_COND ) , "::"
                , stringify ! ( NegCoeff ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_COND ) ) . PosSatur as * const _
                as usize } , 20usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_COND ) , "::"
                , stringify ! ( PosSatur ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_COND ) ) . NegSatur as * const _
                as usize } , 24usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_COND ) , "::"
                , stringify ! ( NegSatur ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_COND ) ) . DeadBand as * const _
                as usize } , 28usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_COND ) , "::"
                , stringify ! ( DeadBand ) ));
}
impl Clone for _FFB_EFF_COND {
    fn clone(&self) -> Self { *self }
}
pub type FFB_EFF_COND = _FFB_EFF_COND;
pub type PFFB_EFF_COND = *mut _FFB_EFF_COND;
#[repr(C)]
#[derive(Debug, Copy)]
pub struct _FFB_EFF_ENVLP {
    pub EffectBlockIndex: BYTE,
    pub AttackLevel: DWORD,
    pub FadeLevel: DWORD,
    pub AttackTime: DWORD,
    pub FadeTime: DWORD,
}
#[test]
fn bindgen_test_layout__FFB_EFF_ENVLP() {
    assert_eq!(::std::mem::size_of::<_FFB_EFF_ENVLP>() , 20usize , concat ! (
               "Size of: " , stringify ! ( _FFB_EFF_ENVLP ) ));
    assert_eq! (::std::mem::align_of::<_FFB_EFF_ENVLP>() , 4usize , concat ! (
                "Alignment of " , stringify ! ( _FFB_EFF_ENVLP ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_ENVLP ) ) . EffectBlockIndex as
                * const _ as usize } , 0usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_ENVLP ) , "::"
                , stringify ! ( EffectBlockIndex ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_ENVLP ) ) . AttackLevel as *
                const _ as usize } , 4usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_ENVLP ) , "::"
                , stringify ! ( AttackLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_ENVLP ) ) . FadeLevel as * const
                _ as usize } , 8usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_ENVLP ) , "::"
                , stringify ! ( FadeLevel ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_ENVLP ) ) . AttackTime as *
                const _ as usize } , 12usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_ENVLP ) , "::"
                , stringify ! ( AttackTime ) ));
    assert_eq! (unsafe {
                & ( * ( 0 as * const _FFB_EFF_ENVLP ) ) . FadeTime as * const
                _ as usize } , 16usize , concat ! (
                "Alignment of field: " , stringify ! ( _FFB_EFF_ENVLP ) , "::"
                , stringify ! ( FadeTime ) ));
}
impl Clone for _FFB_EFF_ENVLP {
    fn clone(&self) -> Self { *self }
}
pub type FFB_EFF_ENVLP = _FFB_EFF_ENVLP;
pub type PFFB_EFF_ENVLP = *mut _FFB_EFF_ENVLP;
pub type FfbGenCB =
    ::std::option::Option<unsafe extern "C" fn(arg1: PVOID, arg2: PVOID)>;
extern "C" {
    /////	General driver data
    pub fn GetvJoyVersion() -> SHORT;
}
extern "C" {
    pub fn vJoyEnabled() -> BOOL;
}
extern "C" {
    pub fn GetvJoyProductString() -> PVOID;
}
extern "C" {
    pub fn GetvJoyManufacturerString() -> PVOID;
}
extern "C" {
    pub fn GetvJoySerialNumberString() -> PVOID;
}
extern "C" {
    pub fn DriverMatch(DllVer: *mut WORD, DrvVer: *mut WORD) -> BOOL;
}
extern "C" {
    pub fn RegisterRemovalCB(cb: RemovalCB, data: PVOID) -> VOID;
}
extern "C" {
    pub fn vJoyFfbCap(Supported: *mut BOOL) -> BOOL;
}
extern "C" {
    pub fn GetvJoyMaxDevices(n: *mut ::std::os::raw::c_int) -> BOOL;
}
extern "C" {
    pub fn GetNumberExistingVJD(n: *mut ::std::os::raw::c_int) -> BOOL;
}
extern "C" {
    /////	vJoy Device properties
    pub fn GetVJDButtonNumber(rID: UINT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetVJDDiscPovNumber(rID: UINT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetVJDContPovNumber(rID: UINT) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn GetVJDAxisExist(rID: UINT, Axis: UINT) -> BOOL;
}
extern "C" {
    pub fn GetVJDAxisMax(rID: UINT, Axis: UINT, Max: *mut LONG) -> BOOL;
}
extern "C" {
    pub fn GetVJDAxisMin(rID: UINT, Axis: UINT, Min: *mut LONG) -> BOOL;
}
extern "C" {
    pub fn GetVJDStatus(rID: UINT) -> VjdStat;
}
extern "C" {
    pub fn isVJDExists(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn GetOwnerPid(rID: UINT) -> ::std::os::raw::c_int;
}
extern "C" {
    /////	Write access to vJoy Device - Basic
    pub fn AcquireVJD(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn RelinquishVJD(rID: UINT) -> VOID;
}
extern "C" {
    pub fn UpdateVJD(rID: UINT, pData: PVOID) -> BOOL;
}
extern "C" {
    //// Reset functions
    pub fn ResetVJD(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn ResetAll() -> VOID;
}
extern "C" {
    pub fn ResetButtons(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn ResetPovs(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn SetAxis(Value: LONG, rID: UINT, Axis: UINT) -> BOOL;
}
extern "C" {
    pub fn SetBtn(Value: BOOL, rID: UINT, nBtn: UCHAR) -> BOOL;
}
extern "C" {
    pub fn SetDiscPov(Value: ::std::os::raw::c_int, rID: UINT, nPov: UCHAR)
     -> BOOL;
}
extern "C" {
    pub fn SetContPov(Value: DWORD, rID: UINT, nPov: UCHAR) -> BOOL;
}
extern "C" {
    pub fn FfbGetEffect() -> FFBEType;
}
extern "C" {
    pub fn FfbRegisterGenCB(cb: FfbGenCB, data: PVOID) -> VOID;
}
extern "C" {
    pub fn FfbStart(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn FfbStop(rID: UINT) -> VOID;
}
extern "C" {
    pub fn IsDeviceFfb(rID: UINT) -> BOOL;
}
extern "C" {
    pub fn IsDeviceFfbEffect(rID: UINT, Effect: UINT) -> BOOL;
}
extern "C" {
    pub fn Ffb_h_DeviceID(Packet: *const FFB_DATA,
                          DeviceID: *mut ::std::os::raw::c_int) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Type(Packet: *const FFB_DATA, Type: *mut FFBPType) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Packet(Packet: *const FFB_DATA, Type: *mut WORD,
                        DataSize: *mut ::std::os::raw::c_int,
                        Data: *mut *mut BYTE) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_EBI(Packet: *const FFB_DATA,
                     Index: *mut ::std::os::raw::c_int) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Report(Packet: *const FFB_DATA,
                            Effect: *mut FFB_EFF_REPORT) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Ramp(Packet: *const FFB_DATA,
                          RampEffect: *mut FFB_EFF_RAMP) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_EffOp(Packet: *const FFB_DATA, Operation: *mut FFB_EFF_OP)
     -> DWORD;
}
extern "C" {
    pub fn Ffb_h_DevCtrl(Packet: *const FFB_DATA, Control: *mut FFB_CTRL)
     -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Period(Packet: *const FFB_DATA,
                            Effect: *mut FFB_EFF_PERIOD) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Cond(Packet: *const FFB_DATA,
                          Condition: *mut FFB_EFF_COND) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_DevGain(Packet: *const FFB_DATA, Gain: *mut BYTE) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Envlp(Packet: *const FFB_DATA,
                           Envelope: *mut FFB_EFF_ENVLP) -> DWORD;
}
extern "C" {
    pub fn Ffb_h_EffNew(Packet: *const FFB_DATA, Effect: *mut FFBEType)
     -> DWORD;
}
extern "C" {
    pub fn Ffb_h_Eff_Constant(Packet: *const FFB_DATA,
                              ConstantEffect: *mut FFB_EFF_CONSTANT) -> DWORD;
}
